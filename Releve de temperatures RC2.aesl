<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="FALSE"/>
<constant value="1" name="TRUE"/>
<constant value="0" name="OFF"/>
<constant value="1" name="ON"/>
<constant value="1" name="ALIGNREAR"/>
<constant value="2" name="GOFORWARD"/>
<constant value="3" name="TAKETEMP"/>
<constant value="4" name="ALIGNFRONT"/>
<constant value="5" name="ROTATE"/>
<constant value="6" name="PAUSE"/>
<constant value="7" name="WAIT"/>
<constant value="8" name="ALIGNFORSTART"/>
<constant value="9" name="GOTOEND"/>
<constant value="10" name="TURNAROUND"/>
<constant value="3" name="LEDBUTTONMAXINDEX"/>
<constant value="7" name="LEDCIRCLEMAXINDEX"/>
<constant value="2" name="LEDLOW"/>
<constant value="16" name="LEDHIGH"/>
<constant value="100" name="SPEEDFORWARD"/>
<constant value="60" name="SPEEDROTATE"/>
<constant value="50" name="SPEEDALIGN"/>
<constant value="5" name="TIMERPERIOD"/>
<constant value="500" name="TIMEWAIT"/>
<constant value="2000" name="TIMETAKETEMP"/>
<constant value="3500" name="PROXALIGN"/>
<constant value="4500" name="PROXFRONT"/>
<constant value="30" name="PROXTOLERANCE"/>
<constant value="3" name="CALIBRATIONMAXINDEX"/>
<constant value="10" name="TEMPPERTRIP"/>
<constant value="99" name="TEMPMAXINDEX"/>
<constant value="500" name="COUNTERMINROTATE"/>
<constant value="0" name="SPEEDCORRECTION"/>
<constant value="0" name="PROXREARCORRECTION"/>
<constant value="0" name="PROXFRONTCORRECTION"/>
<constant value="0" name="ROTATIONCORRECTION"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">#Goal: Explore square of 1m by 1m, outlined with walls and get temperature value every 10 cm. Store those values in SD card.
#Name: Christopher Browne
#Place: ETML, Lausanne

var ledsTempValue[78] = [5,0,32,
0,0,32,
0,5,32,
0,11,32,
0,16,32,
0,21,32,
0,27,32,
0,32,32,
0,32,27,
0,32,21,
0,32,16,
0,32,11,
0,32,5,
0,32,0,
5,32,0,
11,32,0,
16,32,0,
21,32,0,
27,32,0,
32,32,0,
32,27,0,
32,21,0,
32,16,0,
32,11,0,
32,5,0,
32,0,0]

var ledsCircleArray[LEDCIRCLEMAXINDEX + 1]
var ledsButtonArray[LEDBUTTONMAXINDEX + 1]
var calibrationArray[CALIBRATIONMAXINDEX + 1]
var tempArray[TEMPMAXINDEX + 1]
var i
var state
var previousState
var nextState
var ledState
var counterTicks #counts every timer tick while robot is going forward
var counterTempOnThisTrip #counts how many times robot has been in TAKETEMP state
var counterTrip #counts how many trips the rotot has traveled
var counterRotate
var counterMaxRotate
var counterMaxRotateCW
var counterMaxRotateCCW
var counterMaxGoForward
var counterTurnAround
var prox1
var prox2
var proxFactor
var proxCorrection
var temp
var roundedTemp
var previousTemp
var calibrating
var counterCalibration
var sound
var leftTarget
var rightTarget


sub resetLedArray
	for i in 0:LEDCIRCLEMAXINDEX do
		ledsCircleArray[i] = 0
	end
	for i in 0:LEDBUTTONMAXINDEX do
		ledsButtonArray[i] = 0
	end
	for i in 0:TEMPMAXINDEX do
		tempArray[i] = 0
	end

sub initialize
	call sound.system(-1)
	call leds.temperature(0,0)
	call leds.bottom.left(0,0,0)
	call leds.bottom.right(0,0,0)
	call leds.top(0,0,0)
	call leds.prox.h(0,0,0,0,0,0,0,0)
	call leds.prox.v(0,0)
	callsub resetLedArray
	for i in 0:CALIBRATIONMAXINDEX do
		calibrationArray[i] = 0
	end
	timer.period[0] = TIMERPERIOD
	state = OFF
	previousState = OFF
	nextState = OFF
	ledState = OFF
	counterTicks = 0
	counterTempOnThisTrip = 0
	counterTrip = 0
	counterRotate = 0
	counterMaxRotate = 0
	counterMaxRotateCW = 0
	counterMaxRotateCCW = 0
	counterMaxGoForward = 0
	counterTurnAround = 0
	prox1 = 0
	prox2 = 0
	proxFactor = 0
	proxCorrection = 0
	temp = 0
	roundedTemp = 0
	previousTemp = 0
	calibrating = TRUE
	counterCalibration = 0
	sound = OFF
	leftTarget = 0
	rightTarget = 0
	
sub goForward
	ledsCircleArray = [LEDHIGH,LEDLOW,0,0,0,0,0,LEDLOW]
	
	#SPEEDCORRECTION can be modified if robot doesn't go in a straight line
	motor.left.target = SPEEDFORWARD - SPEEDCORRECTION
	motor.right.target = SPEEDFORWARD + SPEEDCORRECTION
	
sub stop
	ledsCircleArray = [0,LEDLOW,0,LEDLOW,0,LEDLOW,0,LEDLOW]
	motor.left.target = 0
	motor.right.target = 0
	
#rotateCW means "rotate ClockWise"
sub rotateCW
	ledsCircleArray = [0,LEDLOW,LEDHIGH,LEDLOW,0,0,0,0]
	motor.left.target = SPEEDROTATE
	motor.right.target = -SPEEDROTATE
	
#rotateCCW means "rotate CounterClockWise"
sub rotateCCW
	ledsCircleArray = [0,0,0,0,0,LEDLOW,LEDHIGH,LEDLOW]
	motor.left.target = -SPEEDROTATE
	motor.right.target = SPEEDROTATE
	
sub setProxRear
	prox1 = 5
	prox2 = 6
	proxFactor = 1
	proxCorrection = PROXREARCORRECTION

sub setProxFront
	prox1 = 1
	prox2 = 3
	proxFactor = -1
	proxCorrection = -PROXFRONTCORRECTION
	
sub align
	#when rear-left is too close
	if prox.horizontal[prox1] > (PROXALIGN + PROXTOLERANCE + proxCorrection) then
		motor.left.target = SPEEDALIGN * proxFactor
	end
	#when rear-left is too far
	if prox.horizontal[prox1] &lt; (PROXALIGN - PROXTOLERANCE + proxCorrection) then
		motor.left.target = -SPEEDALIGN * proxFactor
	end
	#when rear-right is too close
	if prox.horizontal[prox2] > (PROXALIGN + PROXTOLERANCE - proxCorrection) then
		motor.right.target = SPEEDALIGN * proxFactor
	end
	#when rear-right is too far
	if prox.horizontal[prox2] &lt; (PROXALIGN - PROXTOLERANCE - proxCorrection) then
		motor.right.target = -SPEEDALIGN * proxFactor
	end
	#stop left motor when distance is correct
	if prox.horizontal[prox1] &lt; (PROXALIGN + PROXTOLERANCE + proxCorrection) and prox.horizontal[prox1] > (PROXALIGN - PROXTOLERANCE + proxCorrection) then
		motor.left.target = 0
	end
	#stop right motor when distance is correct
	if prox.horizontal[prox2] &lt; (PROXALIGN + PROXTOLERANCE - proxCorrection) and prox.horizontal[prox2] > (PROXALIGN - PROXTOLERANCE - proxCorrection) then
		motor.right.target = 0
	end
	
sub announceTemperature
	roundedTemp = temp / 10
	if sound == ON then
		#division by ten, so only annouces every degree, not every tenth
		if roundedTemp != previousTemp / 10 then
			#only between 15 and 40, so doesn't get missing file error
			if roundedTemp >= 15 and roundedTemp &lt;=40 then
				call sound.play(roundedTemp)
			end
		end
	end
	if ledState == ON then
		if roundedTemp >= 15 and roundedTemp &lt;= 40 then
		roundedTemp = 3 * (roundedTemp - 15)
		call leds.bottom.left(ledsTempValue[roundedTemp],ledsTempValue[roundedTemp+1],ledsTempValue[roundedTemp+2])
			call leds.bottom.right(ledsTempValue[roundedTemp],ledsTempValue[roundedTemp+1],ledsTempValue[roundedTemp+2])
		end
	end
	
	
sub writeTemp
	tempArray[10*(counterTrip-1)+counterTempOnThisTrip-1] = temp
	call sd.open(1,1)
	call sd.write(tempArray,1)
	callsub announceTemperature
	
sub setRotationValue
	#set rotation value in array
	calibrationArray[counterTrip - 1] = counterTicks
	counterTicks = 0
	#change state
	state = WAIT
	nextState = ALIGNFRONT
	
sub resetVarsForStateChange
	counterTicks = 0
	previousState = state

##################################################
	
onevent buttons

	#"when" is used instead of "if" in the next section, so buttons don't get pushed many times when finger is left down.

	when button.center == 1 do
		ledsButtonArray = [LEDHIGH,LEDHIGH,LEDHIGH,LEDHIGH]
		callsub initialize
	end
	
	when button.forward == 1 do
		ledsButtonArray = [LEDHIGH,LEDLOW,LEDLOW,LEDLOW]
		
		if state == OFF then
			state = ROTATE
		elseif state != PAUSE then
			previousState = state
			state = PAUSE
		else
			state = previousState
			previousState = PAUSE
		end
	end
	
	when button.backward == 1 do
		ledsButtonArray = [LEDLOW,LEDLOW,LEDHIGH,LEDLOW]
		if state != OFF then
			callsub stop
		else
			state = ROTATE	
		end
		
	end
	
	when button.right == 1 do
		ledsButtonArray = [LEDLOW,LEDHIGH,LEDLOW,LEDLOW]
		
		#switch LED state
		if ledState == OFF then
			ledState = ON
		else
			ledState = OFF
		end
	end
	
	when button.left == 1 do
		ledsButtonArray = [LEDLOW,LEDLOW,LEDLOW,LEDHIGH]
		
		#change sound state
		if sound == OFF then
			sound = ON
			
			call sound.play(1)
		else
			call sound.system(-1)
			sound = OFF			
		end
	end
	
	when button.center == 0 and button.forward == 0 and button.backward == 0 and button.right == 0 and button.left == 0 do
		ledsButtonArray = [LEDLOW,LEDLOW,LEDLOW,LEDLOW]
	end
	
	if ledState == OFF then
		callsub resetLedArray
	end
	
	#the following is called every time the state of a button is changed
	call leds.buttons(ledsButtonArray[0],ledsButtonArray[1],ledsButtonArray[2],ledsButtonArray[3])
	call leds.circle(ledsCircleArray[0],ledsCircleArray[1],ledsCircleArray[2],ledsCircleArray[3],ledsCircleArray[4],ledsCircleArray[5],ledsCircleArray[6],ledsCircleArray[7])
	
##################################################

#fast timer (~5ms)
onevent timer0

	#if previous state was not PAUSE, to prevent variables being reset when PAUSE is finished
	if previousState != PAUSE then
		when state == OFF do
			callsub stop
		end
		
		when state == ALIGNFRONT do
			callsub stop
			callsub setProxFront
		end
		
		when state == WAIT do
			callsub stop		
		end
		
		when state == ALIGNFORSTART do
			
			#go through calibrationArray to calculate rotation timing
			for i in 0:CALIBRATIONMAXINDEX do
				#don't take two first entries, so robot is properly aligned
				if i > 1 then
					if i % 2 == 0 then
						#increment counterMaxRotateCCW -> average will be made below
						counterMaxRotateCCW += calibrationArray[i]
					else
						#increment counterMaxRotateCW -> average will be made below
						counterMaxRotateCW += calibrationArray[i]
					end
				end
			end
			
			#calculate average
			counterMaxRotateCCW = counterMaxRotateCCW / ((CALIBRATIONMAXINDEX - 1)/2)
			counterMaxRotateCW = counterMaxRotateCW / ((CALIBRATIONMAXINDEX - 1)/2)
			
			#rotate CW, to align for start
			callsub rotateCW
		end
		
		when state == GOFORWARD do
			callsub goForward
		end
		
		when state == ROTATE do
			#manages direction of rotation
			if counterTrip % 2 == 1 then
				callsub rotateCW
				
				#if not calibrating, set rotation time
				if calibrating == FALSE then
					counterMaxRotate = counterMaxRotateCW
				end
			else
				callsub rotateCCW
				
				#if not calibrating, set rotation time
				if calibrating == FALSE then
					counterMaxRotate = counterMaxRotateCCW
				end
			end
			
			if calibrating == TRUE then
				counterTrip++
				#when angle calibration is finished
				when counterTrip > CALIBRATIONMAXINDEX + 1 do
					counterTrip = 0
					state = WAIT
					nextState = ALIGNFORSTART
				end
			else
				counterRotate++
			end
		end
		
		when state == TAKETEMP do
			callsub stop
			counterTempOnThisTrip++
		end
			
		when state == ALIGNREAR do
			callsub setProxRear
					
			#reset counters before next trip
			counterTempOnThisTrip = 0
			counterRotate = 0
			counterTrip++
		end
		
		when state == GOTOEND do
			callsub goForward
		end
		
		when state == TURNAROUND do
			callsub rotateCW
			counterTurnAround++
			
			#when robot is back in start position
			when counterTurnAround == 2 do
				calibrating = FALSE
				counterTrip = 0
			end
		end
	end
	
	when state == PAUSE do
		leftTarget = motor.left.target
		rightTarget = motor.right.target
		
		#stop the wheels without using the "stop" LEDs
		motor.left.target = 0
		motor.right.target = 0
		if ledState == ON then
			call leds.top(LEDHIGH,0,0)
		end
	end
	
	when state != PAUSE do
		motor.left.target = leftTarget
		motor.right.target = rightTarget
		call leds.top(0,0,0)
	end

	
	if state == ALIGNFORSTART then
		counterTicks++
		if counterTicks == counterMaxRotateCW + ROTATIONCORRECTION then
			callsub stop
			callsub resetVarsForStateChange
			state = WAIT
			nextState = ALIGNREAR
		end
	end
	
	if state == ROTATE then
		counterTicks++
		
		if calibrating == TRUE then
			#this ensures that robot rotates at least 45° before trying to align again
			if counterTicks > COUNTERMINROTATE then
				#if rotating CCW
				if motor.left.target &lt; motor.right.target then
					#if front-right prox > front-left prox -> robot is ~perpendicular
					if prox.horizontal[3] > prox.horizontal[1] then
						callsub setRotationValue
					end
				#if rotating CW
				elseif motor.left.target > motor.right.target then
					#if front-left prox > front-right prox -> robot is ~perpendicular
					if prox.horizontal[1] > prox.horizontal[3] then
						callsub setRotationValue
					end
				end
			end
		else #if calibrating == FALSE
			#when robot has rotated 90°
			when counterTicks == counterMaxRotate do
				callsub resetVarsForStateChange
				state = WAIT
				#if first time or if robot has back to wall
				if counterTrip == 0 or counterRotate == 2 then
					nextState = ALIGNREAR
				else
					nextState = GOFORWARD
				end
			end
		end
	end
	
	if state == ALIGNFRONT then	
		callsub align
		
		#if front is aligned
		if motor.left.target == 0 and motor.right.target == 0 then
			callsub resetVarsForStateChange
			state = WAIT
			nextState = ROTATE
		end
	end

	if state == TAKETEMP then
		counterTicks++
		if counterTicks == (TIMETAKETEMP / TIMERPERIOD) then
			previousTemp = temp
			temp = temperature
			callsub writeTemp
			callsub resetVarsForStateChange
			state = GOFORWARD
			#if all measures have been taken
			if counterTempOnThisTrip == TEMPPERTRIP and counterTrip == TEMPPERTRIP then
				state = OFF
			end
		end
	end

	if state == GOFORWARD then
		counterTicks++

		if counterTicks == counterMaxGoForward then
			#if not all temps have been taken
			if counterTempOnThisTrip &lt; TEMPPERTRIP then
				callsub resetVarsForStateChange
				state = TAKETEMP
			end
			#if parallel to wall, then rotate again
			if counterRotate == 1 then
				callsub resetVarsForStateChange
				state = WAIT
				nextState = ROTATE
			end
		end
		
		#when front of robot is near wall
		when prox.horizontal[2] > PROXFRONT do
			state = ALIGNFRONT
		end
	end
	
	if state == ALIGNREAR then
		callsub align
		
		#if rear is aligned
		if motor.left.target == 0 and motor.right.target == 0 then
			callsub resetVarsForStateChange
			state = WAIT
			if calibrating == TRUE then
				nextState = GOTOEND
			else
				nextState = GOFORWARD
			end
		end
	end
	
	if state == GOTOEND then
		counterTicks++
		#when robot front is close to wall
		when prox.horizontal[2] > PROXFRONT do
			callsub stop
			#set distance between each temp measure
			counterMaxGoForward = counterTicks / (TEMPPERTRIP + 1)
			callsub resetVarsForStateChange
			state = WAIT
			nextState = TURNAROUND
		end
	end
	
	if state == TURNAROUND then
		counterTicks++
		#when robot has turned 180°
		when counterTicks == 2 * (counterMaxRotateCW + ROTATIONCORRECTION) do
			callsub stop
			callsub resetVarsForStateChange
			state = WAIT
			nextState = ALIGNREAR
		end
	end
	
	if state == WAIT then	
		counterTicks++
		if counterTicks == (TIMEWAIT / TIMERPERIOD) then
			callsub resetVarsForStateChange
			state = nextState
		end
	end</node>


</network>
